# -*- coding: utf-8 -*-
"""llama2_with_llamaindex.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wHqQuYvFTJYJ2xn-s-XbtL573W-WFoaK
"""

!pip install pypdf

!pip install llama-index-llms-huggingface

!pip install -q transformers einops accelerate langchain bitsandbytes

## embeddings
!pip install sentence_transformers

!pip install llama_index

#from llama_index import VectorStoreIndex , SimpleDirectoryReader, ServiceContext
#from llama_index.llms import HuggingFaceLLM
from llama_index.core.prompts.prompts import SimpleInputPrompt

from llama_index.core import VectorStoreIndex,SimpleDirectoryReader,ServiceContext,PromptTemplate
from llama_index.llms.huggingface import HuggingFaceLLM

documents = SimpleDirectoryReader("/content/drive/MyDrive/data").load_data()

system_prompt = """
You are a Q&A assistant. Your goal is to answer questions as
accurately as possible based on the instructions and context provided.
"""
query_wrapper_prompt = SimpleInputPrompt("<|USER|>{query_str}<|ASSISTANT|>")

!git config --global credential.helper store

!huggingface-cli login

from huggingface_hub import login

login("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")

!pip install -i https://pypi.org/simple/ bitsandbytes

#it's paid now
import torch

llm = HuggingFaceLLM(
    context_window=4096,
    max_new_tokens=256,
    generate_kwargs={"temperature": 0.0, "do_sample": False},
    system_prompt=system_prompt,
    query_wrapper_prompt=query_wrapper_prompt,
    tokenizer_name="meta-llama/Llama-2-7b-chat-hf",
    model_name="meta-llama/Llama-2-7b-chat-hf",
    device_map="auto",
    # uncomment this if using CUDA to reduce memory usage
    #model_kwargs={"torch_dtype": torch.float16 , "load_in_8bit":True}
)

from langchain.embeddings.huggingface import HuggingFaceEmbeddings
from llama_index.core import ServiceContext
from langchain.embeddings import HuggingFaceEmbeddings

embed_model = HuggingFaceEmbeddings(
    model_name="sentence-transformers/all-mpnet-base-v2"
)

!pip install llama-index-embeddings-langchain

service_context=ServiceContext.from_defaults(
    chunk_size=512,
    llm=llm,
    embed_model=embed_model
)

index=VectorStoreIndex.from_documents(documents,service_context=service_context)

query_engine=index.as_query_engine()

response=query_engine.query("what are the various aspects of shell variables?")

print(response)